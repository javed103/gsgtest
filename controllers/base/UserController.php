<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace app\controllers\base;

use app\models\User;
use app\models\UserDetails;

use app\models\BankDetails;

use app\models\Letter;

use app\models\City;



use app\models\UserSearch;
use yii\web\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use yii\filters\AccessControl;
use dmstr\bootstrap\Tabs;

/**
* UserController implements the CRUD actions for User model.
*/
class UserController extends Controller
{


/**
* @var boolean whether to enable CSRF validation for the actions in this controller.
* CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
*/
public $enableCsrfValidation = false;


/**
* Lists all User models.
* @return mixed
*/
public function actionIndex()
{
    $searchModel  = new UserSearch;
    $dataProvider = $searchModel->search($_GET);

Tabs::clearLocalStorage();

Url::remember();
\Yii::$app->session['__crudReturnUrl'] = null;

return $this->render('index', [
'dataProvider' => $dataProvider,
    'searchModel' => $searchModel,
]);
}

/**
* Displays a single User model.
* @param integer $id
*
* @return mixed
*/
public function actionView($id)
{
\Yii::$app->session['__crudReturnUrl'] = Url::previous();
Url::remember();
Tabs::rememberActiveState();

$UserDetails = UserDetails::find()
    ->where(['user_id' => $id])
    ->one();
    
    $BankDetails = BankDetails::find()
    ->where(['user_id' => $id])
    ->one();
    
        $Letter = Letter::find()
    ->where(['user_id' => $id])
    ->one();


return $this->render('view', [
    
     'UserDetails' => $UserDetails,
    'BankDetails' => $BankDetails,
    'Letter' => $Letter,
    

'model' => $this->findModel($id),
]);
}

/**
* Creates a new User model.
* If creation is successful, the browser will be redirected to the 'view' page.
* @return mixed
*/
public function actionCreate()
{
    
    
$model = new User;

$UserDetails = new UserDetails;

$BankDetails = new BankDetails;
$Letter = new Letter;
$City = new City;


try {
if ($model->load($_POST) &&  $BankDetails->load($_POST)   &&  $UserDetails->load($_POST)  &&  $Letter->load($_POST)) {
    
    
    $numAlpha=6;
    $listAlpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';

      

        $unique_address_number= "AD-" .str_shuffle(

                substr(str_shuffle($listAlpha), 0, $numAlpha)

        );
       
    $model->unique_address_number=$unique_address_number;
    $model->save(false);
     $id=$model->id;
     
    
      $BankDetails->user_id= $id;
     
      $BankDetails->save(false);
       
       $UserDetails->user_id= $id;
       $UserDetails->save(false);
     $Letter->user_id= $id;
     $Letter->save(false);
    
return $this->redirect(['view', 'id' =>  $id]);

} elseif (!\Yii::$app->request->isPost) {
$model->load($_GET);
}
} catch (\Exception $e) {
$msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
$model->addError('_exception', $msg);
}
return $this->render('create', [
    
    'UserDetails' => $UserDetails,
    'BankDetails' => $BankDetails,
    'Letter' => $Letter,
    'City' => $City,
    'model' => $model
    
    
    ]);
}

/**
* Updates an existing User model.
* If update is successful, the browser will be redirected to the 'view' page.
* @param integer $id
* @return mixed
*/
public function actionUpdate($id)
{
    
    
$UserDetails = UserDetails::find()
    ->where(['user_id' => $id])
    ->one();
    
    $BankDetails = BankDetails::find()
    ->where(['user_id' => $id])
    ->one();
    
        $Letter = Letter::find()
    ->where(['user_id' => $id])
    ->one();
    
    
$model = $this->findModel($id);

if ($model->load($_POST) &&  $BankDetails->load($_POST)   &&  $UserDetails->load($_POST)  &&  $Letter->load($_POST)) {
    
    
    $numAlpha=6;
    $listAlpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';

      

        $unique_address_number= "AD-" .str_shuffle(

                substr(str_shuffle($listAlpha), 0, $numAlpha)

        );
       
    $model->unique_address_number=$unique_address_number;
    $model->save(false);
     $id=$model->id;
     
    
      $BankDetails->user_id= $id;
     
      $BankDetails->save(false);
       
       $UserDetails->user_id= $id;
       $UserDetails->save(false);
     $Letter->user_id= $id;
     $Letter->save(false);
return $this->redirect(Url::previous());
} else {
return $this->render('update', [
  'UserDetails' => $UserDetails,
    'BankDetails' => $BankDetails,
    'Letter' => $Letter,
    'City' => '',
    'model' => $model
]);
}
}

/**
* Deletes an existing User model.
* If deletion is successful, the browser will be redirected to the 'index' page.
* @param integer $id
* @return mixed
*/
public function actionDelete($id)
{
try {
$this->findModel($id)->delete();
} catch (\Exception $e) {
$msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
\Yii::$app->getSession()->addFlash('error', $msg);
return $this->redirect(Url::previous());
}

// TODO: improve detection
$isPivot = strstr('$id',',');
if ($isPivot == true) {
return $this->redirect(Url::previous());
} elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
Url::remember(null);
$url = \Yii::$app->session['__crudReturnUrl'];
\Yii::$app->session['__crudReturnUrl'] = null;

return $this->redirect($url);
} else {
return $this->redirect(['index']);
}
}

/**
* Finds the User model based on its primary key value.
* If the model is not found, a 404 HTTP exception will be thrown.
* @param integer $id
* @return User the loaded model
* @throws HttpException if the model cannot be found
*/
protected function findModel($id)
{
if (($model = User::findOne($id)) !== null) {
return $model;
} else {
throw new HttpException(404, 'The requested page does not exist.');
}
}
}
